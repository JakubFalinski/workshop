name: CI/CD Pipeline

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main
  
jobs:
  tests:
    name: Run Python Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'   # <- zmienione z 3.10 na 3.11

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8

      - name: Run linter
        run: flake8 .

      - name: Run tests
        run: pytest

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: tests


    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: 'Azure login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/example-webapp:latest .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ secrets.ACR_LOGIN_SERVER }}/example-webapp:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true


      - name: Push Docker Image to ACR
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/example-webapp:latest

  deploy-infra:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: set-variables
        shell: 'pwsh'
        run: |
          @("ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}",
            "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}",
            "ARM_USE_OIDC=true",
            "ARM_USE_AZUREAD=true") | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        shell: 'pwsh'
        run: terraform init

      - name: Plan Terraform Changes
        shell: 'pwsh'
        run: terraform plan

      - name: Apply Terraform Changes
        shell: 'pwsh'
        run: terraform apply -auto-approve

    update-staging:
    name: Update App Service (Staging)
    runs-on: ubuntu-latest
    needs: deploy-infra
    environment: staging

    steps:
      - name: 'Azure login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
      - name: Update App Service (staging)
        run: |
          az webapp config container set \
            --name example-webapp-staging \
            --resource-group rg-07 \
            --docker-custom-image-name ${{ secrets.ACR_LOGIN_SERVER }}/example-webapp:latest \
            --docker-registry-server-url https://${{ secrets.ACR_LOGIN_SERVER }}

  update-production:
    name: Update App Service (Production)
    runs-on: ubuntu-latest
    needs: update-staging
    environment: production

    steps:
      - name: 'Azure login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
      - name: Update App Service (production)
        run: |
          az webapp config container set \
            --name example-webapp-production \
            --resource-group rg-07 \
            --docker-custom-image-name ${{ secrets.ACR_LOGIN_SERVER }}/example-webapp:latest \
            --docker-registry-server-url https://${{ secrets.ACR_LOGIN_SERVER }}
